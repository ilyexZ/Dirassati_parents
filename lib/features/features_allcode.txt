==== ./profile/domain/entity/profile.dart ====
class Profile {
  final String parentId;
  final String occupation;
  final String firstName;
  final String lastName;
  final String birthDate;
  final String userName;
  final String email;
  final bool emailConfirmed;
  final String phoneNumber;
  final bool phoneNumberConfirmed;
  final String relationshipName;

  Profile({
    required this.parentId,
    required this.occupation,
    required this.firstName,
    required this.lastName,
    required this.birthDate,
    required this.userName,
    required this.email,
    required this.emailConfirmed,
    required this.phoneNumber,
    required this.phoneNumberConfirmed,
    required this.relationshipName,
  });

  factory Profile.fromJson(Map<String, dynamic> json) {
    return Profile(
      parentId: json['parentId'] as String,
      occupation: json['occupation'] as String,
      firstName: json['firstName'] as String,
      lastName: json['lastName'] as String,
      birthDate: json['birthDate'] as String,
      userName: json['userName'] as String,
      email: json['email'] as String,
      emailConfirmed: json['emailConfirmed'] as bool,
      phoneNumber: json['phoneNumber'] as String,
      phoneNumberConfirmed: json['phoneNumberConfirmed'] as bool,
      relationshipName: json['relationshipName'] as String,
    );
  }
}


==== ./profile/domain/usecases/get_profile_usecase.dart ====
import 'package:dirassati/features/profile/data/datasources/repository/profile_repository.dart';
import 'package:dirassati/features/profile/domain/entity/profile.dart';

class GetProfileUseCase {
  final ProfileRepository repository;

  GetProfileUseCase({required this.repository});

  Future<Profile> execute() async {
    return await repository.getProfile();
  }
}


==== ./profile/data/datasources/repository/profile_repository.dart ====
import 'package:dirassati/features/profile/data/datasources/profile_remote_datasource.dart';
import 'package:dirassati/features/profile/domain/entity/profile.dart';


abstract class ProfileRepository {
  Future<Profile> getProfile();
}

class ProfileRepositoryImpl implements ProfileRepository {
  final ProfileRemoteDataSource remoteDataSource;

  ProfileRepositoryImpl({required this.remoteDataSource});

  @override
  Future<Profile> getProfile() async {
    return await remoteDataSource.fetchProfile();
  }
}


==== ./profile/data/datasources/profile_remote_datasource.dart ====
import 'package:dio/dio.dart';
import 'package:dirassati/core/auth_info_provider.dart';
import 'package:dirassati/core/shared_constants.dart';
import 'package:dirassati/features/profile/domain/entity/profile.dart';
import 'package:riverpod/riverpod.dart';

abstract class ProfileRemoteDataSource {
  Future<Profile> fetchProfile();
}

class ProfileRemoteDataSourceImpl implements ProfileRemoteDataSource {
  final Dio dio;
  final Ref ref;

  ProfileRemoteDataSourceImpl({required this.dio, required this.ref});

  @override
  Future<Profile> fetchProfile() async {
    final parentID = await ref.read(parentIdProvider.future);
    final url = "http://$backendProviderIp/api/parents/$parentID";

    // For now, you can return static data if you wish:
    if (parentID == "debugparentID") {
      return Profile(
        parentId: "1f0fd9ac-d8bb-4089-b952-7f482ebc41da",
        occupation: "Teacher",
        firstName: "Jane",
        lastName: "Doe",
        birthDate: "31/12/9999",
        userName: "parent@example.com",
        email: "parent@example.com",
        emailConfirmed: true,
        phoneNumber: "555-123-4567",
        phoneNumberConfirmed: false,
        relationshipName: "",
      );
    }

    // Otherwise, fetch from the backend.
    final response = await dio.get(url);
    if (response.statusCode == 200) {
      return Profile.fromJson(response.data);
    } else {
      throw Exception("Failed to fetch profile");
    }
  }
}


==== ./profile/presentation/widgets/profile_settings.dart ====
// profile_settings.dart
import 'package:flutter/material.dart';
import 'package:dirassati/features/profile/presentation/widgets/custom_list_tile.dart';

class ProfileSettings extends StatelessWidget {
  final List<Map<String, dynamic>> settings;

  const ProfileSettings({
    super.key,
    required this.settings,
  }) ;

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        // "Settings" header
        Container(
          width: double.infinity,
          color: Colors.white,
          padding: const EdgeInsets.fromLTRB(16, 32, 16, 4),
          child: const Text(
            "Settings",
            style: TextStyle(
              color: Colors.indigo,
              fontSize: 14,
              fontWeight: FontWeight.w600,
            ),
          ),
        ),
        // List of settings
        ...settings.asMap().entries.map((entry) {
          final index = entry.key;
          final setting = entry.value;

          return Column(
            children: [
              CustomListTile(
                iconColor: setting['iconColor'],
                title: setting['title'],
                leadingIcon: setting['icon'],
                trailingIcon: setting['trailingIcon'] != false
                    ? Icons.arrow_forward_ios
                    : null,
                onTap: setting['onTap'],
              ),
              if (index != settings.length - 1)
                const Divider(height: 0.1),
            ],
          );
        }).toList(),
      ],
    );
  }
}


==== ./profile/presentation/widgets/profile_header.dart ====
import 'package:dirassati/features/profile/domain/entity/profile.dart';
import 'package:flutter/material.dart';

class ProfileHeader extends StatelessWidget {
  final Profile profile;
  const ProfileHeader({super.key, required this.profile});

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: const EdgeInsets.symmetric(vertical: 16),
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.2),
            blurRadius: 4,
            spreadRadius: 0.5,
          ),
        ],
      ),
      padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 16),
      child: Row(
        children: [
          const CircleAvatar(
            radius: 30,
            // You might later change this to load a user image from profile data.
            backgroundImage: NetworkImage("https://www.gravatar.com/avatar/2c7d99fe281ecd3bcd65ab915bac6dd5?s=250"),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  "${profile.firstName} ${profile.lastName}",
                  style: const TextStyle(
                    fontSize: 13,
                    fontWeight: FontWeight.w600,
                    color: Color(0xFF1E1E1E),
                    letterSpacing: -0.3,
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  profile.occupation,
                  style: const TextStyle(fontSize: 11, color: Colors.grey),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}


==== ./profile/presentation/widgets/profile_info.dart ====
// profile_info.dart
import 'package:dirassati/features/profile/domain/entity/profile.dart';
import 'package:flutter/material.dart';

class ProfileInfo extends StatelessWidget {
  final Profile profile;
  const ProfileInfo({super.key,required this.profile}) ;

  @override
  Widget build(BuildContext context) {
    // Adjust these styles as needed
    const labelStyle = TextStyle(
      fontSize: 11,
      fontWeight: FontWeight.w400,
      color: Colors.black54,  
    );
    const valueStyle = TextStyle(
      fontSize: 10,
      fontWeight: FontWeight.w500,
      color: Colors.black87,
    );

    return Container(
      width: double.infinity,
      color: Colors.white,
      padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Section title
           const Text(
            "Informations",
            style: TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.w600,
              color: Color(0xff4D44B5),
            ),
          ),
          const SizedBox(height: 4),

          // Info rows
          _buildInfoRow("Adresse", "Somewhere",
              labelStyle, valueStyle),
          const SizedBox(height: 4),
          _buildInfoRow("Date de naissance", profile.birthDate,
              labelStyle, valueStyle),
          const SizedBox(height: 4),
          _buildInfoRow("Lieu de naissance", "Elsewhere",
              labelStyle, valueStyle),
          const SizedBox(height: 4),
          _buildInfoRow("Numero de refence", profile.parentId,
              labelStyle, valueStyle),
          const SizedBox(height: 4),
          _buildInfoRow("Emploi", profile.occupation,
              labelStyle, valueStyle),
        ],
      ),
    );
  }

  // A helper method for creating a label-value pair in two lines
  Widget _buildInfoRow(
    String label,
    String value,
    TextStyle labelStyle,
    TextStyle valueStyle,
  ) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(label, style: labelStyle),
        Text(value, style: valueStyle),
      ],
    );
  }
}


==== ./profile/presentation/widgets/inline_error_box.dart ====
// inline_error_box.dart
import 'package:flutter/material.dart';

class InlineErrorBox extends StatelessWidget {
  final String errorMessage;
  final VoidCallback onClose;

  const InlineErrorBox({
    Key? key,
    required this.errorMessage,
    required this.onClose,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      width: double.infinity,
      margin: const EdgeInsets.symmetric(horizontal: 8, vertical: 8),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.red.shade400,
        borderRadius: BorderRadius.circular(8),
      ),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Icon(Icons.error, color: Colors.white),
          const SizedBox(width: 8),
          Expanded(
            child: Text(
              errorMessage,
              style: const TextStyle(color: Colors.white),
            ),
          ),
          IconButton(
            icon: const Icon(Icons.close, color: Colors.white),
            onPressed: onClose,
          ),
        ],
      ),
    );
  }
}


==== ./profile/presentation/widgets/password_form.dart ====
// lib/features/auth/presentation/widgets/password_form.dart
import 'package:dirassati/features/auth/presentation/widgets/label_text_style.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:phosphor_flutter/phosphor_flutter.dart';
import 'inline_error_box.dart';
import '../../../auth/domain/providers/auth_provider.dart';

class PasswordFormWidget extends ConsumerStatefulWidget {
  const PasswordFormWidget({Key? key}) : super(key: key);

  @override
  ConsumerState<PasswordFormWidget> createState() => _PasswordFormWidgetState();
}

class _PasswordFormWidgetState extends ConsumerState<PasswordFormWidget> {
  final _formKey = GlobalKey<FormState>();
  final _currentPasswordController = TextEditingController();
  final _newPasswordController = TextEditingController();

  bool _showErrorBox = false;
  String _errorMessage = "";
  bool _isLoading = false;

  @override
  void dispose() {
    _currentPasswordController.dispose();
    _newPasswordController.dispose();
    super.dispose();
  }

  Future<void> _onContinue() async {
    if (_formKey.currentState!.validate()) {
      setState(() {
        _isLoading = true;
        _showErrorBox = false;
      });
      final changePasswordUseCase = ref.read(changePasswordUseCaseProvider);
      try {
        await changePasswordUseCase.execute(
          currentPassword: _currentPasswordController.text,
          newPassword: _newPasswordController.text,
        );
        setState(() {
          _isLoading = false;
        });
        // Show success notification or navigate as needed.
        ScaffoldMessenger.of(context).showSnackBar(const SnackBar(
          content: Text("Password changed successfully!"),
        ));
      } catch (e) {
        setState(() {
          _isLoading = false;
          _showErrorBox = true;
          _errorMessage = "Échec: opération échouée, veuillez réessayer.";
        });
      }
    }
  }

  InputDecoration get _inputDecoration => InputDecoration(
        contentPadding: const EdgeInsets.all(8),
        prefixIcon: Icon(
          PhosphorIcons.lockSimple(),
          size: 20,
        ),
        labelText: "Password",
        labelStyle: labelTextStyle,
        floatingLabelBehavior: FloatingLabelBehavior.never,
        border: const OutlineInputBorder(
          borderRadius: BorderRadius.all(Radius.circular(7)),
        ),
        enabledBorder: const OutlineInputBorder(
          borderRadius: BorderRadius.all(Radius.circular(7)),
          borderSide: BorderSide(color: Colors.grey),
        ),
      );

  @override
  Widget build(BuildContext context) {
    return Form(
      key: _formKey,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const SizedBox(height: 40),
          const Text("Mot de pass actuel"),
          Container(
            margin: const EdgeInsets.symmetric(horizontal: 8),
            child: TextFormField(
              enableInteractiveSelection: true,
              controller: _currentPasswordController,
              obscureText: false,
              decoration: _inputDecoration,
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return "Veuillez entrer votre mot de passe actuel";
                }
                return null;
              },
            ),
          ),
          const SizedBox(height: 16),
          const Text("Nouveau Mot de pass", textAlign: TextAlign.left),
          Container(
            margin: const EdgeInsets.symmetric(horizontal: 8),
            child: TextFormField(
              enableInteractiveSelection: true,
              controller: _newPasswordController,
              obscureText: false,
              decoration: _inputDecoration.copyWith(
                labelText: "New Password",
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return "Veuillez entrer un nouveau mot de passe";
                } else if (value.length < 6) {
                  return "Le mot de passe doit comporter au moins 6 caractères";
                }
                return null;
              },
            ),
          ),
          const SizedBox(height: 16),
          if (_showErrorBox)
            InlineErrorBox(
              errorMessage: _errorMessage,
              onClose: () {
                setState(() {
                  _showErrorBox = false;
                });
              },
            ),
          const SizedBox(height: 8),
          SizedBox(
            width: double.infinity,
            height: 50,
            child: ElevatedButton(
              onPressed: _isLoading ? null : _onContinue,
              style: ElevatedButton.styleFrom(
                backgroundColor: const Color(0xFF5B3EE5),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
              ),
              child: _isLoading
                  ? const CircularProgressIndicator(
                      valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                    )
                  : const Text(
                      "Continuer",
                      style: TextStyle(fontSize: 16, color: Colors.white),
                    ),
            ),
          ),
          const SizedBox(height: 16),
        ],
      ),
    );
  }
}


==== ./profile/presentation/widgets/custom_list_tile.dart ====
// custom_list_tile.dart
import 'package:flutter/material.dart';

class CustomListTile extends StatelessWidget {
  final String title;
  final IconData leadingIcon;
  final IconData? trailingIcon;
  final VoidCallback? onTap;
  final Color? iconColor;

  const CustomListTile({
    super.key,
    required this.title,
    required this.leadingIcon,
    this.trailingIcon,
    this.onTap,
    this.iconColor,
  });

  static const blacktile = Color(0xFF393939);

  @override
  Widget build(BuildContext context) {
    return Material(
      color: Colors.transparent,
      child: InkWell(
        onTap: onTap,
        splashFactory: InkRipple.splashFactory,
        child: Padding(
          padding: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
          child: Row(
            children: [
              Icon(leadingIcon, color: iconColor ?? blacktile, size: 24),
              const SizedBox(width: 10),
              Expanded(
                child: Text(
                  title,
                  style: TextStyle(
                    fontWeight: FontWeight.w500,
                    fontSize: 11,
                    color: iconColor ?? blacktile,
                    letterSpacing: -0.3,
                  ),
                ),
              ),
              if (trailingIcon != null)
                Icon(trailingIcon, color: blacktile, size: 14),
            ],
          ),
        ),
      ),
    );
  }
}


==== ./profile/presentation/pages/change_password_page.dart ====
// change_password_page.dart
import 'package:dirassati/features/profile/presentation/widgets/password_form.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

class ChangePasswordPage extends StatelessWidget {
  const ChangePasswordPage({super.key});

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () => FocusScope.of(context).unfocus(),
      child: Scaffold(
        appBar: AppBar(
          leading: IconButton(
            icon: const Icon(Icons.arrow_back),
            onPressed: () async {
              await SystemChannels.textInput.invokeMethod('TextInput.hide');
              await Future.delayed(const Duration(milliseconds: 100));
              Navigator.pop(context);
            },
          ),
          title: const Text(
            "Changer mot de passe",
            style: TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.w500,
              letterSpacing: -0.3,
            ),
            textAlign: TextAlign.left,
          ),
          titleSpacing: -5.0,
          backgroundColor: Colors.white,
          elevation: 0,
          foregroundColor: Colors.black,
        ),
        backgroundColor: Colors.white,
        body: const Padding(
          padding: EdgeInsets.symmetric(horizontal: 16.0),
          child: PasswordFormWidget(),
        ),
      ),
    );
  }
}


==== ./profile/presentation/pages/profile_page.dart ====
import 'package:dirassati/core/auth_info_provider.dart';
import 'package:dirassati/core/services/colorLog.dart';
import 'package:dirassati/features/acceuil/domain/providers/students_provider.dart';
import 'package:dirassati/features/auth/domain/providers/auth_provider.dart';
import 'package:dirassati/features/profile/presentation/pages/change_password_page.dart';
import 'package:dirassati/features/profile/presentation/providers/profile_providers.dart';
import 'package:dirassati/features/profile/presentation/widgets/profile_header.dart';
import 'package:dirassati/features/profile/presentation/widgets/profile_info.dart';
import 'package:dirassati/features/profile/presentation/widgets/profile_settings.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:phosphor_flutter/phosphor_flutter.dart';

class ProfilePage extends ConsumerWidget {
  const ProfilePage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final profileAsyncValue = ref.watch(profileProvider);

    return Scaffold(
      appBar: AppBar(
        title: const Text("Profile",style: TextStyle(fontSize: 18, fontWeight: FontWeight.w500),),
        backgroundColor: Colors.white,
        elevation: 0,
        foregroundColor: Colors.black,
      ),
      body: profileAsyncValue.when(
        data: (profile) => SingleChildScrollView(
          child: Column(
            children: [
              // Pass the dynamic profile to the header and info widgets.
              ProfileHeader(profile: profile),
              ProfileInfo(profile: profile),
              // You can keep settings static or later link them to further endpoints.
              ProfileSettings(
                settings: [
                  {
                    'title': "Changer mot de passe",
                    'icon': PhosphorIcons.lockSimple(),
                    'onTap': () {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                            builder: (context) => const ChangePasswordPage()),
                      );
                    }
                  },
                  {
                    'title': "Changer numero de téléphone",
                    'icon': PhosphorIcons.phone(),
                    'onTap': () {}
                  },
                  {
                    'title': "Changer adresse email",
                    'icon': PhosphorIcons.envelopeSimple(),
                    'onTap': () {},
                  },
                  {
                    'title': "Aide",
                    'icon': PhosphorIcons.question(),
                    'onTap': () {}
                  },
                  {
                    'title': "Se déconnecter",
                    'icon': PhosphorIcons.signOut(),
                    'onTap': () async {
                      await ref.read(authStateProvider.notifier).logout();
                      // Invalidate providers to clear cached data
                      ref.invalidate(authInfoProvider);
                      ref.invalidate(parentIdProvider);
                      ref.invalidate(profileProvider);
                      ref.invalidate(studentsProvider); // Add this line
                      clog('g',"Logged out successfully");
                    },
                    'iconColor': const Color(0xFFDC2626),
                    'trailingIcon': false,
                  },
                ],
              ),
            ],
          ),
        ),
        loading: () => const Center(child: CircularProgressIndicator()),
        error: (error, stack) => Center(child: Text("Error: $error")),
      ),
      backgroundColor: Colors.white,
    );
  }
}


==== ./profile/presentation/providers/profile_providers.dart ====
import 'package:dio/dio.dart';
import 'package:dirassati/features/profile/data/datasources/profile_remote_datasource.dart';
import 'package:dirassati/features/profile/data/datasources/repository/profile_repository.dart';
import 'package:dirassati/features/profile/domain/entity/profile.dart';
import 'package:dirassati/features/profile/domain/usecases/get_profile_usecase.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
// Provide Dio instance
final dioProvider = Provider<Dio>((ref) => Dio());

// Provide the remote data source
final profileRemoteDataSourceProvider = Provider<ProfileRemoteDataSource>((ref) {
  final dio = ref.watch(dioProvider);
  return ProfileRemoteDataSourceImpl(dio: dio,ref:ref);
});

// Provide the repository
final profileRepositoryProvider = Provider<ProfileRepository>((ref) {
  final remoteDataSource = ref.watch(profileRemoteDataSourceProvider);
  return ProfileRepositoryImpl(remoteDataSource: remoteDataSource);
});

// Provide the use case
final getProfileUseCaseProvider = Provider<GetProfileUseCase>((ref) {
  final repository = ref.watch(profileRepositoryProvider);
  return GetProfileUseCase(repository: repository);
});

// Finally, create a FutureProvider to fetch the profile
final profileProvider = FutureProvider<Profile>((ref) async {
  final useCase = ref.watch(getProfileUseCaseProvider);
  return await useCase.execute();
});


==== ./notifications/presentation/widgets/static_data.dart ====
const List<Map<String, String>> convocationsData = [
    {
      'title': 'Mr. LastName',
      'subtitle': 'mauvaise conduite',
      'child': 'LastName First',
      'description': 'Vous devriez venir pour que nous réglions ce problème.',
      'date': '25 Janvier 2025 - 9:00 AM',
    },
    {
      'title': 'Mr. LastName',
      'subtitle': 'mauvaise conduite',
      'child': 'LastName First',
      'description': 'Vous devriez venir pour que nous réglions ce problème.',
      'date': '25 Janvier 2025 - 9:00 AM',
    },
    {
      'title': 'Mr. LastName',
      'subtitle': 'mauvaise conduite',
      'child': 'LastName First',
      'description': 'Vous devriez venir pour que nous réglions ce problème.',
      'date': '25 Janvier 2025 - 9:00 AM',
    },
    {
      'title': 'Mr. LastName',
      'subtitle': 'mauvaise conduite',
      'child': 'LastName First',
      'description': 'Vous devriez venir pour que nous réglions ce problème.',
      'date': '25 Janvier 2025 - 9:00 AM',
    },
    {
      'title': 'Mr. LastName',
      'subtitle': 'mauvaise conduite',
      'child': 'LastName First',
      'description': 'Vous devriez venir pour que nous réglions ce problème.',
      'date': '25 Janvier 2025 - 9:00 AM',
    },
    {
      'title': 'Mr. LastName',
      'subtitle': 'mauvaise conduite',
      'child': 'LastName First',
      'description': 'Vous devriez venir pour que nous réglions ce problème.',
      'date': '25 Janvier 2025 - 9:00 AM',
    },
  ];

  // Example data for the Absences tab
  const List<Map<String, String>> absencesData = [
    {
      'title': 'Mr. LastName',
      'subtitle': 'absence injustifiée',
      'child': 'LastName First',
      'description': 'Votre enfant a été absent sans justificatif.',
      'date': '20 Février 2025 - 8:30 AM',
    },
    {
      'title': 'Mr. LastName',
      'subtitle': 'absence injustifiée',
      'child': 'LastName First',
      'description': 'Votre enfant a été absent sans justificatif.',
      'date': '20 Février 2025 - 8:30 AM',
    },
  ];

==== ./notifications/presentation/widgets/notification_list.dart ====
import 'package:flutter/material.dart';
import 'notification_card.dart';

class NotificationList extends StatelessWidget {
  final List<Map<String, String>> data;

  const NotificationList({super.key, required this.data}) ;

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: EdgeInsets.only(bottom: 10),
      color: Colors.transparent,
      child: ListView.builder(
        itemCount: data.length,
        itemBuilder: (context, index) {
          return NotificationCard(data: data[index]);
        },
      ),
    );
  }
}


==== ./notifications/presentation/widgets/notification_card.dart ====
import 'package:flutter/material.dart';

class NotificationCard extends StatelessWidget {
  final Map<String, String> data;

  const NotificationCard({super.key, required this.data});

  @override
  Widget build(BuildContext context) {
    return Card(
      shape: RoundedRectangleBorder(
        side: const BorderSide(color: Color(0xFFE1E3E8), width: 1.0),
        borderRadius: BorderRadius.circular(8),
      ),
      elevation: 1,
      surfaceTintColor: Colors.transparent,
      color: Colors.white,
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: Padding(
        padding: const EdgeInsets.all(12),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Title & subtitle separated
            buildRow(data['title'] ?? '', data['subtitle'] ?? ""),
            const SizedBox(height: 4),
            // Child info
            buildRow("Enfant concernée", data['child'] ?? ""),

            const SizedBox(height: 4),
            // Description

            buildRow(null, data['description'] ?? ""),
            const SizedBox(height: 8),
            const Divider(),
            buildRow(
              'Date de réception',
              data['date'] ?? '',
            ),
            // Date row
          ],
        ),
      ),
    );
  }
}

Widget buildRow(String? label, String data) {
  return Row(
    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
    children: [
      if (label != null)
        Expanded(
            child: Text(
          "$label:",
          style: labelstyle,
        )),
      Expanded(
          child: Text(
        data,
        style: datastyle,
        softWrap: true,
        maxLines: 2,
      )),
    ],
  );
}

const TextStyle labelstyle = TextStyle(
  fontWeight: FontWeight.w600,
  fontSize: 11,
);
const datastyle = TextStyle(
  fontSize: 10,
  color: Colors.grey,
  fontWeight: FontWeight.w400,
);


==== ./notifications/presentation/widgets/red_banner.dart ====
import 'package:flutter/material.dart';

class RedBanner extends StatelessWidget {
  const RedBanner({super.key}) ;

  @override
  Widget build(BuildContext context) {
    return Container(
      
      padding: EdgeInsets.all(0),
      margin: const EdgeInsets.fromLTRB(8,0,8,20),
      width: double.infinity,
      decoration: BoxDecoration( // Ensure background is visible
        border: Border.all(color: Colors.grey, width: 1), // Grey border for all sides
        borderRadius: BorderRadius.circular(8), // Round the corners
      ),
      child: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.center, // Align items properly
              children: [
                const Icon(Icons.warning_rounded, size: 25, color: Colors.red),
                const SizedBox(width: 8), // Add spacing between icon and text
                Expanded(
                  child: Text(
                    'Les convocations envoyées via l’application sont obligatoires et doivent être respectées.',
                    softWrap: true,
                    style: const TextStyle(
                      color: Colors.black,
                      fontSize: 10,
                      fontWeight: FontWeight.w500,
                      fontFamily: 'Poppins',
                    ),
                  ),
                ),
              ],
            ),
          ),
          ClipRRect(
            borderRadius: const BorderRadius.only(
              bottomLeft: Radius.circular(8),
              bottomRight: Radius.circular(8),
            ), // Match the parent container's radius
            child: Container(
              width: double.infinity,
              height: 4,
              color: Colors.red,
            ),
          ),
        ],
      ),
    );
  }
}


==== ./notifications/presentation/pages/notifications_child.dart ====
import 'package:flutter/material.dart';

class NotificationsChildPage extends StatefulWidget {
  const NotificationsChildPage({super.key});

  @override
  State<NotificationsChildPage> createState() => _NotificationsPageState();
}

class _NotificationsPageState extends State<NotificationsChildPage>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;

  // Example data for the Convocations tab
  final List<Map<String, String>> convocationsData = [
    {
      'title': 'Mr. LastName',
      'subtitle': 'mauvaise conduite',
      'child': 'Enfant concernée : LastName First',
      'description': 'Vous devriez venir pour que nous réglions ce problème.',
      'date': '25 Janvier 2025 - 9:00 AM',
    },
    {
      'title': 'Mr. LastName',
      'subtitle': 'mauvaise conduite',
      'child': 'Enfant concernée : LastName First',
      'description': 'Vous devriez venir pour que nous réglions ce problème.',
      'date': '25 Janvier 2025 - 9:00 AM',
    },
    {
      'title': 'Mr. LastName',
      'subtitle': 'mauvaise conduite',
      'child': 'Enfant concernée : LastName First',
      'description': 'Vous devriez venir pour que nous réglions ce problème.',
      'date': '25 Janvier 2025 - 9:00 AM',
    },
  ];

  // Example data for the Absences tab
  final List<Map<String, String>> absencesData = [
    {
      'title': 'Mr. LastName',
      'subtitle': 'absence injustifiée',
      'child': 'Enfant concernée : LastName First',
      'description': 'Votre enfant a été absent sans justificatif.',
      'date': '20 Février 2025 - 8:30 AM',
    },
    {
      'title': 'Mr. LastName',
      'subtitle': 'absence injustifiée',
      'child': 'Enfant concernée : LastName First',
      'description': 'Votre enfant a été absent sans justificatif.',
      'date': '18 Février 2025 - 10:00 AM',
    },
  ];

  @override
  void initState() {
    super.initState();
    // Initialize the TabController with 2 tabs
    _tabController = TabController(length: 2, vsync: this);
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  Widget _buildNotificationCard(Map<String, String> data) {
    return Card(
      elevation: 1,
      margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      child: Padding(
        padding: const EdgeInsets.all(12),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Title & subtitle
            Text(
              '${data['title']} — ${data['subtitle']}',
              style: const TextStyle(
                fontWeight: FontWeight.w600,
                fontSize: 15,
              ),
              
            ),
            const SizedBox(height: 4),
            // Child info
            Text(
              data['child'] ?? '',
              style: const TextStyle(
                fontWeight: FontWeight.w500,
                fontSize: 14,
              ),
            ),
            const SizedBox(height: 4),
            // Description
            Text(
              data['description'] ?? '',
              style: const TextStyle(
                fontSize: 14,
              ),
            ),
            const SizedBox(height: 8),
            // Date
            Row(
              children: [
                const Text(
                  'Date de réception : ',
                  style: TextStyle(
                    fontSize: 12,
                    fontWeight: FontWeight.w500,
                    color: Colors.grey,
                  ),
                ),
                Text(
                  data['date'] ?? '',
                  style: const TextStyle(
                    fontSize: 13,
                    color: Colors.grey,
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildConvocationsTab() {
    return ListView.builder(
      itemCount: convocationsData.length,
      itemBuilder: (context, index) {
        final item = convocationsData[index];
        return _buildNotificationCard(item);
      },
    );
  }

  Widget _buildAbsencesTab() {
    return ListView.builder(
      itemCount: absencesData.length,
      itemBuilder: (context, index) {
        final item = absencesData[index];
        return _buildNotificationCard(item);
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Notifications'),
        centerTitle: true,
        backgroundColor: Colors.white,
        elevation: 0,
        foregroundColor: Colors.black, // Back button color
        bottom: PreferredSize(
          preferredSize: const Size.fromHeight(48),
          child: Container(
            color: Colors.white,
            child: TabBar(
              controller: _tabController,
              labelColor: Colors.black,
              indicatorColor: Colors.black,
              unselectedLabelColor: Colors.grey,
              tabs: const [
                Tab(text: 'Convocations'),
                Tab(text: 'Absences'),
              ],
            ),
          ),
        ),
      ),
      body: Column(
        children: [
          // Expanded so the tabs fill remaining space
          Expanded(
            child: TabBarView(
              controller: _tabController,
              children: [
                _buildConvocationsTab(),
                _buildAbsencesTab(),
              ],
            ),
          ),
          // Red banner at the bottom
          Container(
            width: double.infinity,
            color: Colors.red,
            padding: const EdgeInsets.all(12),
            child: const Text(
              'Les convocations envoyées via l’application sont obligatoires et doivent être respectées.',
              style: TextStyle(
                color: Colors.white,
                fontSize: 13,
              ),
              textAlign: TextAlign.center,
            ),
          ),
        ],
      ),
      backgroundColor: const Color(0xFFF5F5F5),
    );
  }
}


==== ./notifications/presentation/pages/notifications_page.dart ====
import 'package:dirassati/features/notifications/presentation/widgets/notification_list.dart';
import 'package:dirassati/features/notifications/presentation/widgets/red_banner.dart';
import 'package:dirassati/features/notifications/presentation/widgets/static_data.dart';
import 'package:flutter/material.dart';

class NotificationsPage extends StatefulWidget {
  const NotificationsPage({super.key});

  @override
  State<NotificationsPage> createState() => _NotificationsPageState();
}

class _NotificationsPageState extends State<NotificationsPage>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;

  // Example data for the Convocations tab

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  /// Helper method to build a tab with a vertical divider to its right
  Widget _buildTabWithDivider(String text, bool last) {
    const double divderspacing = 20;
    return Row(
      mainAxisAlignment: MainAxisAlignment.end,
      children: [
        if (last)
          Container(
            margin: EdgeInsets.only(right: divderspacing),
            width: 1,
            height: 20,
            color: Colors.grey[300],
          ),
        Expanded(
          child: Align(
            alignment: last ? Alignment.centerLeft : Alignment.centerRight,
            child: Tab(text: text),
          ),
        ),
        if (!last)
          Container(
            margin: EdgeInsets.only(left: divderspacing),
            width: 1,
            height: 20,
            color: Colors.grey[300],
          ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          "Notifications",
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.w500),
        ),
        backgroundColor: Colors.white,
        elevation: 0,
        foregroundColor: Colors.black,
        bottom: PreferredSize(
          preferredSize: const Size.fromHeight(45),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TabBar(
                overlayColor: WidgetStateProperty.resolveWith<Color?>(
                    (Set<WidgetState> states) {
                  // Change the overlay color when a tab is pressed
                  if (states.contains(WidgetState.pressed)) {
                    return Colors.transparent;
                  }

                  return null; 
                }),
                dividerColor: Colors.transparent,
                labelColor: const Color(0xFF4D44B5),
                indicatorColor: const Color(0xFF4D44B5),
                indicatorSize: TabBarIndicatorSize.tab,
                indicatorWeight: 2,
                unselectedLabelColor: Colors.grey,
                controller: _tabController,

                labelPadding: EdgeInsets.zero,

                // Moves the indicator line up or down
                indicatorPadding: const EdgeInsets.only(bottom: 12),
                labelStyle: const TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.w400,
                ),
                tabs: [
                  _buildTabWithDivider("Convocations", false),
                  _buildTabWithDivider("Absences", true),
                ],
                tabAlignment: TabAlignment.fill,
              ),
              // This divider sits just below the tabs
              Transform.translate(
                offset: const Offset(0, -12),
                child: Divider(
                  height: 1,
                  thickness: 1,
                  color: Colors.grey[300],
                ),
              ),
            ],
          ),
        ),
      ),
      body: Column(
        children: [
          // TabBarView for content
          Expanded(
            child: TabBarView(
              controller: _tabController,
              children: [
                NotificationList(data: convocationsData),
                NotificationList(data: absencesData),
              ],
            ),
          ),
          // The red banner at the bottom
          //const RedBanner(),
        ],
      ),
      backgroundColor: Colors.white,
    );
  }
}


==== ./acceuil/domain/providers/notes_provider.dart ====
// lib/features/acceuil/domain/providers/notes_provider.dart
import 'package:dirassati/core/core_providers.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../acceuil/data/datasources/students_remote_data_source.dart';
import '../../../acceuil/data/models/note_model.dart';

// We assume that dioProvider, secureStorageProvider, and studentsRemoteDataSourceProvider
// are defined as in your existing students provider code.


final studentsRemoteDataSourceProvider = Provider<StudentsRemoteDataSource>((ref) {
  final dio = ref.watch(dioProvider);
  final storage = ref.watch(secureStorageProvider);
  return StudentsRemoteDataSource(dio: dio, storage: storage);
});

// FutureProvider.family to fetch notes by category and trimester.
final notesProvider = FutureProvider.family<List<Note>, Map<String, String>>((ref, params) async {
  final remoteDataSource = ref.watch(studentsRemoteDataSourceProvider);
  final category = params['category']!;
  final trimester = params['trimester']!;
  return remoteDataSource.fetchNotes(category, trimester);
});



==== ./acceuil/domain/providers/students_provider.dart ====
import 'package:dirassati/core/auth_info_provider.dart';
import 'package:dirassati/core/core_providers.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../acceuil/data/datasources/students_remote_data_source.dart';
import '../../../acceuil/data/repositories/student_repository.dart';
import '../../../acceuil/data/models/student_model.dart';


// Provide the remote data source.
final studentsRemoteDataSourceProvider = Provider<StudentsRemoteDataSource>((ref) {
  final dio = ref.watch(dioProvider);
  final storage = ref.watch(secureStorageProvider);
  return StudentsRemoteDataSource(dio: dio, storage: storage);
});

// Provide the repository.
final studentsRepositoryProvider = Provider<StudentsRepository>((ref) {
  final remoteDataSource = ref.watch(studentsRemoteDataSourceProvider);
  return StudentsRepository(remoteDataSource);
});

// ./features/acceuil/domain/providers/students_provider.dart
final studentsProvider = FutureProvider<List<Student>>((ref) async {
  final parentId = await ref.watch(parentIdProvider.future);
  final repository = ref.watch(studentsRepositoryProvider);
  return repository.fetchStudents(parentId); // Modify fetchStudents to accept parentId
});

// FutureProvider to fetch the list of students.
// final studentsProvider = FutureProvider<List<Student>>((ref) async {
//   final repository = ref.watch(studentsRepositoryProvider);
//   return repository.fetchStudents();
// });


==== ./acceuil/data/datasources/students_remote_data_source.dart ====
import 'package:dio/dio.dart';
import 'package:dirassati/core/shared_constants.dart';
import 'package:dirassati/features/acceuil/data/models/note_model.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:jwt_decoder/jwt_decoder.dart';
import '../models/student_model.dart';

class StudentsRemoteDataSource {
  final Dio dio;
  final FlutterSecureStorage storage;

  // Define a debug token for debugging purposes.
  static const String debugToken = "debug_dummy_token";

  StudentsRemoteDataSource({
    required this.dio,
    required this.storage,
  });

  Future<List<Student>> getStudents(String parentId) async {
  // Use parentId in the API call
  //final response = await dio.get("http://$backendProviderIp/api/parents/$parentId/students");
    // Read token from secure storage.
    final token = await storage.read(key: 'auth_token');
    if (token == null) {
      throw Exception("No auth token found");
    }
    
    // Check if token is our debug token.
    if (token == debugToken) {
      return _getStaticStudents();
    }
    
    // Decode token using jwt_decoder package.
    final Map<String, dynamic> decodedToken = JwtDecoder.decode(token);
    // Extract the parent ID. Adjust the key name if needed.
    final parentId = decodedToken['parentId'];
    if (parentId == null) {
      throw Exception("Parent ID not found in token");
    }
    
    // Make the GET request using the extracted parentId.
    final response = await dio.get("http://$backendProviderIp/api/parents/$parentId/students");
    if (response.statusCode == 200) {
      final List<dynamic> data = response.data;
      return data.map((json) => Student.fromJson(json)).toList();
    } else {
      throw Exception("Failed to fetch students");
    }
  }

  List<Student> _getStaticStudents() {
    // Return a static list of students for debugging purposes.
    return [
      Student(
        studentId: "debug-1",
        firstName: "Debug",
        lastName: "Student One",
        enrollmentDate: "2025-01-01",
        grade: "1st Grade",
        isActive: true,
        
      ),
      Student(
        studentId: "debug-2",
        firstName: "Debug",
        lastName: "Student Two",
        enrollmentDate: "2025-01-02",
        grade: "2nd Grade",
        isActive: true,
      ),
      // Add more static students if needed.
    ];
  }
  // New method to fetch notes for a given category.
  Future<List<Note>> fetchNotes(String category, String trimester) async {
    // Replace with your actual endpoint.
    const endpoint = "https://api.example.com/notes";
    final response = await dio.get(endpoint, queryParameters: {
      'category': category,
      'trimester': trimester,
    });
    if (response.statusCode == 200) {
      final List data = response.data as List;
      return data.map((json) => Note.fromJson(json)).toList();
    } else {
      throw Exception("Failed to load notes");
    }
  }
}


==== ./acceuil/data/models/student_model.dart ====
class Student {
  final String studentId;
  final String firstName;
  final String lastName;
  final String enrollmentDate;
  final String? grade;
  final bool isActive;
  final String? address;
  final String? birthPlace;
  final String? birthDate;
  final String? classe;

  Student({
    required this.studentId,
    required this.firstName,
    required this.lastName,
    required this.enrollmentDate,
    this.grade,
    required this.isActive,
     this.address,
     this.birthPlace,
    this.birthDate,
    this.classe
  });

  factory Student.fromJson(Map<String, dynamic> json) {
    return Student(
      studentId: json['studentId'] as String? ?? "",
      firstName: json['firstName'] as String? ?? "",
      lastName: json['lastName'] as String? ?? "",
      enrollmentDate: json['enrollmentDate'] as String? ?? "",
      grade: json['grade'] as String? ?? "",
      isActive: json['isActive'] as bool? ?? false,
      address: json['address'] as String? ?? "",
      birthPlace: json['birthPlace'] as String? ?? "",
      birthDate: json['birthDate'] as String? ?? "",
      classe: json['classe'] as String? ?? "",
    );
  }
}


==== ./acceuil/data/models/note_model.dart ====
// lib/features/acceuil/data/models/note_model.dart
class Note {
  final String title;
  final int coef;
  final double grade;

  Note({
    required this.title,
    required this.coef,
    required this.grade,
  });

  factory Note.fromJson(Map<String, dynamic> json) {
    return Note(
      title: json['title'] as String,
      coef: json['coef'] as int,
      grade: (json['grade'] as num).toDouble(),
    );
  }
}


==== ./acceuil/data/repositories/student_repository.dart ====
import '../datasources/students_remote_data_source.dart';
import '../models/student_model.dart';

class StudentsRepository {
  final StudentsRemoteDataSource remoteDataSource;

  StudentsRepository(this.remoteDataSource);

  Future<List<Student>> fetchStudents(String parentId) async {
  return await remoteDataSource.getStudents(parentId);
}
}


==== ./acceuil/presentation/widgets/grade_item.dart ====
import 'package:flutter/material.dart';

class GradeItem extends StatelessWidget {
  final String subject;
  final int coef;
  final double grade;

  const GradeItem({
    super.key,
    required this.subject,
    required this.coef,
    required this.grade,
  });

  @override
  Widget build(BuildContext context) {
    // Simple logic to color-code the grade:
    final bool isPassed = grade >= 10;
    final backgroundColor =Color(0xffF5F4FF);
        //isPassed ? Colors.green.shade50 : Colors.red.shade50;
    final textColor = isPassed ? Colors.green.shade700 : Colors.red.shade700;

    return Card(
      elevation: 1,

      
      child: Container(
        
        margin: const EdgeInsets.symmetric(vertical: 6),
        padding: const EdgeInsets.symmetric(vertical: 10,horizontal: 8),
        decoration: BoxDecoration(
          color: backgroundColor,
          borderRadius: BorderRadius.circular(8),
        ),
        child: Row(
          children: [
            // Subject
            Expanded(
              flex: 7,
              child: Text(
                subject,
                style: const TextStyle(fontSize: 14),
              ),
            ),
            // Coefficient
            Expanded(
              flex: 1,
              child: Text(
                "$coef",
                style: const TextStyle(fontSize: 14),
              ),
            ),
            // Grade
            Expanded(
              flex: 2,
              child: Text(
                "$grade",
                textAlign: TextAlign.right,
                style: TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.w600,
                  color: textColor,
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}


==== ./acceuil/presentation/widgets/student_card.dart ====
// ... other imports
import 'package:dirassati/features/acceuil/data/models/student_model.dart';
import 'package:dirassati/features/acceuil/presentation/pages/student_details_page.dart';
import 'package:flutter/material.dart';

class StudentCard extends StatelessWidget {
  final Student student;

  const StudentCard({super.key, required this.student});

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 25, vertical: 25),
      clipBehavior: Clip.none,
      elevation: 5,
      color: Colors.white,
      shape: RoundedRectangleBorder(
        borderRadius: const BorderRadius.only(
          bottomLeft: Radius.circular(20),
          bottomRight: Radius.circular(20),
        ),
        side: BorderSide(
          width: 0.1,
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // MAIN CONTENT
          Padding(
            padding: const EdgeInsets.all(12),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // TOP ROW: Image + Name & Notification Icon
                Row(
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    // Wrap the profile image in a Hero widget.
                    Hero(
                      tag: 'student-${student.studentId}', // Unique tag
                      child: CircleAvatar(
                        radius: 28,
                        backgroundImage: NetworkImage(
                          "https://www.gravatar.com/avatar/2c7d99fe281ecd3bcd65ab915bac6dd5?s=250",
                        ),
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Hero(
                        tag: 'student-name-${student.studentId}',
                        child: Material(
                          color: Colors.transparent,
                          child: Text(
                            "${student.firstName} ${student.lastName}",
                            style: const TextStyle(
                              fontSize: 14,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                        ),
                      ),
                    ),
                    // Notification Icon with badge
                    GestureDetector(
                      onTap: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => const Placeholder(),
                          ),
                        );
                      },
                      child: Stack(
                        children: [
                          const Icon(Icons.notifications_outlined, size: 30),
                          Positioned(
                            right: 0,
                            top: 0,
                            child: Container(
                              width: 12,
                              height: 12,
                              decoration: BoxDecoration(
                                color: Colors.red,
                                borderRadius: BorderRadius.circular(8),
                              ),
                              alignment: Alignment.center,
                              child: const Text(
                                "3",
                                style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 7,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 12),
                const Divider(),
                // Classe
                _buildInfoRow("Classe",student.grade ?? "#empty#"),
                // Reference
                _buildInfoRow("Num Ref", student.studentId),
                // Performance
                const Divider(),
                _buildPerformanceRow(),
              ],
            ),
          ),

          // BOTTOM SECTION WITH DIFFERENT COLOR
          GestureDetector(
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (_) => StudentDetailsPage(student: student),
                ),
              );
            },
            child: Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: const Color(
                    0xFF4D44B5), // Different color for the bottom part
                borderRadius: const BorderRadius.only(
                  bottomLeft: Radius.circular(20),
                  bottomRight: Radius.circular(20),
                ),
              ),
              child: Center(
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: const [
                    Text(
                      "Voir details",
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 14,
                        
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                    SizedBox(width: 10),
                    Icon(
                      Icons.arrow_forward,
                      color: Colors.white,
                    ),
                  ],
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  // Helper methods ...
  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            "$label: ",
            style: const TextStyle(
              fontSize: 14,
              fontWeight: FontWeight.w400,
              color: Colors.grey,
              fontFamily: "Poppins",
            ),
          ),
          const SizedBox(width: 5),
          Expanded(
            child: Text(
              value,
              textAlign: TextAlign.end,
              style: const TextStyle(fontSize: 14, fontFamily: "Poppins"),
              softWrap: true,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildPerformanceRow() {
    return GestureDetector(
      onTap: () {},
      child: Padding(
        padding: const EdgeInsets.symmetric(vertical: 4),
        child: Row(
          children: [
            const Expanded(
              child: Text(
                "Performance",
                style: TextStyle(
                    fontSize: 14, color: Colors.grey, fontFamily: "Poppins"),
              ),
            ),
            SizedBox(
              width: 100,
              child: LinearProgressIndicator(
                borderRadius: BorderRadius.circular(2),
                value: 0.6,
                backgroundColor: Colors.grey[300],
                valueColor:
                    const AlwaysStoppedAnimation<Color>(Color(0xFF1A8037)),
              ),
            ),
          ],
        ),
      ),
    );
  }
}


==== ./acceuil/presentation/widgets/activities_widget.dart ====
import 'package:dirassati/features/acceuil/presentation/pages/notes_page.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:phosphor_flutter/phosphor_flutter.dart';

class ActivitesWidget extends StatelessWidget {
  const ActivitesWidget({super.key});

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(8),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            "Activités",
            style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: CupertinoColors.systemIndigo),
          ),
          const SizedBox(height: 8),
          // Example activities
          _buildActivityRow(Icons.calendar_month_outlined, "Emploi du temps"),
          Divider(),
          GestureDetector(
              onTap: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => const NotesPage()),
                );
              },
              child: _buildActivityRow(PhosphorIconsBold.fileText, "Notes")),
          Divider(),
          _buildActivityRow(Icons.check_circle_outline, "Présence"),
        ],
      ),
    );
  }

  Widget _buildActivityRow(IconData icon, String label) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 0),
      child: Row(
        children: [
          Container(
              padding: EdgeInsets.all(3),
              decoration: BoxDecoration(
                color: Color(0xFFD9D9D9), // Background color
                shape: BoxShape.circle, // Makes it circular
              ),
              child: Icon(
                icon,
                size: 20,
                color: Color(0xFF4D44B5),
              )),
          const SizedBox(width: 30),
          Text(label, style: const TextStyle(fontSize: 14)),
        ],
      ),
    );
  }
}


==== ./acceuil/presentation/widgets/profile_header_widget.dart ====
import 'package:dirassati/features/acceuil/data/models/student_model.dart';
import 'package:flutter/material.dart';

class ProfileHeaderWidget extends StatelessWidget {
  final Student student;
  const ProfileHeaderWidget({super.key, required this.student});

  @override
  Widget build(BuildContext context) {
    return Container(
      margin: EdgeInsets.symmetric(horizontal: 8,vertical: 15),
      padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 15),
      decoration: BoxDecoration(
          //border: Border.all(width: 0.1,color:Color(0xffEDEFFF) ),
          borderRadius: BorderRadius.circular(10.0),
          color: Color(0xffEDEFFF).withAlpha(230),
          boxShadow: [
            BoxShadow(
                blurRadius: 2,
                spreadRadius: 1,
                color: Colors.black.withOpacity(0.1))
          ]),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildRow(
            "Nom:",
            "${student.firstName} ${student.lastName}",
          ),
          _buildRow("Adresse", student.address ?? "#empty#"),
          _buildRow("Date de naissance", student.birthDate ?? "#empty#"),
          _buildRow("Lieu de naissance", student.birthPlace ?? "#empty#"),
        ],
      ),
    );
  }

  Widget _buildRow(String label, String value, {TextStyle? labelStyle}) {
    return Container(
      margin: EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Expanded(
            flex: 1,
            child: Text(
              label,
              style: labelStyle ??
                  const TextStyle(fontSize: 12, color: Color(0xFF777777)),
              softWrap: true,
            ),
          ),
          const SizedBox(width: 4),
          Expanded(
            flex: 1,
            child: Text(
              value,
              textAlign: TextAlign.start,
              style: const TextStyle(
                fontSize: 12,
                fontWeight: FontWeight.w500,
              ),
              softWrap: true,
            ),
          ),
        ],
      ),
    );
  }
}


==== ./acceuil/presentation/widgets/informations_generales_widget.dart ====
import 'package:dirassati/features/acceuil/data/models/student_model.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

class InformationsGeneralesWidget extends StatelessWidget {
  final Student student;
  const InformationsGeneralesWidget({super.key, required this.student});

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(8),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            "Informations générales",
            style: TextStyle(
              fontSize: 16,
              fontWeight: FontWeight.bold,
              color: CupertinoColors.systemIndigo
            ),
          ),
          const SizedBox(height: 8),
          _buildRow("Année", student.grade ?? "#empty#"),
          Divider(),
          _buildRow("Classe", student.classe ?? "##empty##"),
          Divider(),
          _buildRow("N° Ref", student.studentId),
          Divider(),
          _buildRow("Filière",student.grade ?? "#empty#" ),
        ],
      ),
    );
  }

  Widget _buildRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        mainAxisAlignment:MainAxisAlignment.start ,
        mainAxisSize: MainAxisSize.max,
         // Ensures text aligns properly when wrapping
        children: [
          Expanded(
            flex: 1,
            child: Text(
              label,
              style: const TextStyle(fontSize: 14,fontWeight: FontWeight.w500),
              
              softWrap: true,
            ),
            
          ),
          const SizedBox(width: 30),
          Expanded(
            flex: 4, // Give more space to the value
            child: Text(
              textAlign: TextAlign.start,
              value,
              style: const TextStyle(fontSize: 14,color: Color(0xFF393939),fontWeight: FontWeight.w400),
              softWrap: true,
            ),
          ),
        ],
      ),
    );
  }
}


==== ./acceuil/presentation/widgets/notes_tab.dart ====
// lib/features/acceuil/presentation/widgets/notes_tab.dart
import 'package:flutter/material.dart';
import 'grade_item.dart';

class NotesTab extends StatefulWidget {
  final String title;
  const NotesTab({Key? key, required this.title}) : super(key: key);

  @override
  State<NotesTab> createState() => _NotesTabState();
}

class _NotesTabState extends State<NotesTab> {
  final List<Map<String, dynamic>> subjects = [
    {"subject": "langue Arabe", "coef": 3, "grade": 12.5},
    {"subject": "Mathematiques", "coef": 4, "grade": 15.5},
    {"subject": "langue Francaise", "coef": 2, "grade": 7.0},
    {"subject": "Physiques", "coef": 2, "grade": 14.75},
    {"subject": "Sciences naturelles", "coef": 3, "grade": 12.5},
    {"subject": "sport", "coef": 4, "grade": 15.0},
    {"subject": "langue Anglaise", "coef": 2, "grade": 7.0},
  ];

  final List<String> trimesters = ["Trimestre 1", "Trimestre 2", "Trimestre 3"];
  String _selectedTrimester = "Trimestre 1";

  @override
  Widget build(BuildContext context) {
    final sharedStyle = const TextStyle(fontSize: 10, fontWeight: FontWeight.w400);

    return Padding(
      
      padding: const EdgeInsets.symmetric(horizontal: 16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Dropdown Row
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 8.0),
            child: Row(
              children: [
                Expanded(
                  flex: 3,
                  child: DropdownButton<String>(
                    dropdownColor: Colors.white,
                    padding: EdgeInsets.zero,
                    value: _selectedTrimester,
                    menuWidth: 95,
                    
                    icon: const Icon(Icons.arrow_drop_down),
                    style: const TextStyle(color: Colors.black, fontSize: 12),
                    onChanged: (String? newValue) {
                      if (newValue != null) {
                        setState(() {
                          _selectedTrimester = newValue;
                        });
                      }
                    },
                    items: trimesters.map((String trimester) {
                      return DropdownMenuItem<String>(
                        value: trimester,
                        child: Text(trimester, style: sharedStyle),
                      );
                    }).toList(),
                  ),
                ),
                const Expanded(flex: 3, child: SizedBox()),
                const Expanded(flex: 1, child: Text("Coef", style: TextStyle(fontSize: 10, fontWeight: FontWeight.w400))),
                const Expanded(
                  flex: 2,
                  child: Text("Note", style: TextStyle(fontSize: 10, fontWeight: FontWeight.w400), textAlign: TextAlign.right),
                ),
              ],
            ),
          ),
          // ListView of Grades (Static Data)
          Expanded(
            child: ListView.builder(
              itemCount: subjects.length,
              itemBuilder: (context, index) {
                final item = subjects[index];
                return GradeItem(
                  subject: item["subject"] as String,
                  coef: item["coef"] as int,
                  grade: item["grade"] as double,
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
/*
// lib/features/acceuil/presentation/widgets/notes_tab.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../acceuil/domain/providers/notes_provider.dart';
import '../../../acceuil/data/models/note_model.dart';
import 'grade_item.dart';

class NotesTab extends ConsumerStatefulWidget {
  final String title;
  const NotesTab({Key? key, required this.title}) : super(key: key);

  @override
  ConsumerState<NotesTab> createState() => _NotesTabState();
}

class _NotesTabState extends ConsumerState<NotesTab> {
  final List<String> trimesters = ["Trimestre 1", "Trimestre 2", "Trimestre 3"];
  String _selectedTrimester = "Trimestre 1";

  @override
  Widget build(BuildContext context) {
    final sharedStyle = const TextStyle(fontSize: 10, fontWeight: FontWeight.w400);
    
    // Use the provider with both the category (from widget.title) and selected trimester.
    final notesAsyncValue = ref.watch(notesProvider({
      'category': widget.title,
      'trimester': _selectedTrimester,
    }));

    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Dropdown Row
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 8.0),
            child: Row(
              children: [
                Expanded(
                  flex: 3,
                  child: DropdownButton<String>(
                    padding: EdgeInsets.zero,
                    value: _selectedTrimester,
                    icon: const Icon(Icons.arrow_drop_down),
                    style: const TextStyle(color: Colors.black, fontSize: 12),
                    onChanged: (String? newValue) {
                      if (newValue != null) {
                        setState(() {
                          _selectedTrimester = newValue;
                        });
                      }
                    },
                    items: trimesters.map((String trimester) {
                      return DropdownMenuItem<String>(
                        value: trimester,
                        child: Text(trimester, style: sharedStyle),
                      );
                    }).toList(),
                  ),
                ),
                const Expanded(flex: 3, child: SizedBox()),
                const Expanded(flex: 1, child: Text("Coef", style: TextStyle(fontSize: 10, fontWeight: FontWeight.w400))),
                const Expanded(
                  flex: 2,
                  child: Text("Note", style: TextStyle(fontSize: 10, fontWeight: FontWeight.w400), textAlign: TextAlign.right),
                ),
              ],
            ),
          ),
          // ListView with API data
          Expanded(
            child: notesAsyncValue.when(
              data: (notes) => ListView.builder(
                itemCount: notes.length,
                itemBuilder: (context, index) {
                  final Note note = notes[index];
                  return GradeItem(
                    subject: note.title,
                    coef: note.coef,
                    grade: note.grade,
                  );
                },
              ),
              loading: () => const Center(child: CircularProgressIndicator()),
              error: (error, stackTrace) => Center(child: Text("Error: $error")),
            ),
          ),
        ],
      ),
    );
  }
}

 */

==== ./acceuil/presentation/pages/notes_page.dart ====
import 'package:dirassati/features/acceuil/presentation/widgets/notes_tab.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';

class NotesPage extends StatelessWidget {
  const NotesPage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 4,
      child: Scaffold(
        appBar: AppBar(
          backgroundColor: Colors.white,
          title: const Text(
            "Notes",
            style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
          ),
          titleSpacing: 0,
          bottom: PreferredSize(
            preferredSize: const Size.fromHeight(60),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TabBar(
                  //overlayColor: null,
                  //dragStartBehavior: DragStartBehavior.start,
                  
                  dividerColor: Colors.transparent,
                  labelColor: const Color(0xFF4D44B5),
                  indicatorColor: const Color(0xFF4D44B5),
                  indicatorSize: TabBarIndicatorSize.tab,
                  unselectedLabelColor: Colors.grey,
                  labelPadding: EdgeInsets.zero,
                  indicatorPadding: const EdgeInsets.only(bottom: 12),
                  labelStyle: const TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.w400,
                  ),
                  tabs: [
                    _buildTabWithDivider("devoir 1"),
                    _buildTabWithDivider("devoir 2"),
                    _buildTabWithDivider("Examen"),
                    const Tab(text: "Evaluation"), // Last tab without divider
                  ],
                  tabAlignment: TabAlignment.fill,
                ),
                Transform.translate(
                  offset: const Offset(0, -12),
                  child: Divider(
                    height: 1,
                    thickness: 1,
                    color: Colors.grey[300],
                  ),
                ),
              ],
            ),
          ),
        ),
        body: const SafeArea(
          child: TabBarView(
            children: [
              NotesTab(title: "devoir 1"),
              NotesTab(title: "devoir 2"),
              NotesTab(title: "Examen"),
              NotesTab(title: "Evaluation"),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildTabWithDivider(String text) {
    return Row(
      children: [
        Expanded(child: Tab(text: text)),
        Container(
          width: 1,
          height: 20,
          color: Colors.grey[300],
          margin: const EdgeInsets.symmetric(horizontal: 0),
        ),
      ],
    );
  }
}

==== ./acceuil/presentation/pages/acceuil_page.dart ====
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../acceuil/domain/providers/students_provider.dart';
import '../widgets/student_card.dart';

class AcceuilPage extends ConsumerWidget {
  const AcceuilPage({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final studentsAsyncValue = ref.watch(studentsProvider);

    return Scaffold(
       appBar: AppBar(
        backgroundColor: Color(0xFFEDEFFF),
        surfaceTintColor: Colors.transparent,
        title: Center(
          child: const Text(
            "LOGO",
            style: TextStyle(
              fontWeight: FontWeight.w600,
              fontSize: 30,
            ),
            textAlign: TextAlign.center,
          ),
        ),
      ),
      backgroundColor: Colors.transparent,
      body: Container(
        margin: EdgeInsets.only(top: 8),
        decoration: BoxDecoration(
          boxShadow: [BoxShadow(blurRadius: 4,spreadRadius: 1,color: Colors.black.withOpacity(0.3))],
          color: Colors.white,
          border: Border(),
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(30),
            topRight: Radius.circular(30),
          ),
        ),
        child: Column(
          children: [
            Align(
              alignment: Alignment.centerLeft,
              child: Padding(
                
                padding: const EdgeInsets.only(left: 20.0, top: 20.0,bottom: 10),
                child: const Text(
                  "Enfants",
                  style: TextStyle(
                      color: CupertinoColors.systemIndigo,
                      fontFamily: "Poppins",
                      fontSize: 24,
                      fontWeight: FontWeight.w500,
                      shadows: [
                        Shadow(
                          color: CupertinoColors.systemIndigo,
                          blurRadius: 3,
                          offset: Offset(1, 1)
                        ),
                      ]),
                ),
              ),
            ),
            Expanded(
              child: RefreshIndicator(
                onRefresh: ()async {
                  ref.invalidate(studentsProvider);
                },
                child: studentsAsyncValue.when(
                  data: (students) => ListView.builder(
                    addAutomaticKeepAlives: false,
                    itemCount: students.length,
                    itemBuilder: (context, index) {
                      final student = students[index];
                      return StudentCard(student: student);
                    },
                  ),
                  loading: () =>
                      const Center(child: CircularProgressIndicator()),
                  error: (error, stackTrace) =>
                      Center(child: Text("Error: $error")),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}


==== ./acceuil/presentation/pages/student_details_page.dart ====
import 'package:dirassati/core/background_shapes_toponly.dart';
import 'package:dirassati/features/acceuil/data/models/student_model.dart';
import 'package:dirassati/features/acceuil/presentation/widgets/activities_widget.dart';
import 'package:dirassati/features/acceuil/presentation/widgets/informations_generales_widget.dart';
import 'package:dirassati/features/acceuil/presentation/widgets/profile_header_widget.dart';
import 'package:flutter/material.dart';

class StudentDetailsPage extends StatelessWidget {
  final Student student;

  const StudentDetailsPage({super.key, required this.student});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: BackgroundShapesToponly(
          child2: Column(
            children: [
              Text(
                "LOGO",
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                ),
              ),
              // Wrap the profile image in a Hero widget using the same tag as StudentCard.
              Hero(
                tag: 'student-${student.studentId}',
                child: CircleAvatar(
                  radius: 50,
                  backgroundImage: NetworkImage(
                    "https://www.gravatar.com/avatar/2c7d99fe281ecd3bcd65ab915bac6dd5?s=250",
                  ),
                ),
              ),
            ],
          ),
          child1: Column(
            children: [
              Expanded(
                child: SingleChildScrollView(
                  padding: const EdgeInsets.symmetric(horizontal: 5),
                  child: Column(
                    children: [
                      ProfileHeaderWidget(student: student),
                      InformationsGeneralesWidget(student: student),
                      ActivitesWidget(),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}


==== ./onboarding/presentation/widgets/onboarding_button.dart ====
import 'package:dirassati/core/services/shared_prefernces_service.dart';
import 'package:flutter/material.dart';
import 'package:dirassati/features/auth/presentation/pages/auth_wrapper.dart';

class OnboardingButton extends StatelessWidget {
  const OnboardingButton({super.key});
  Future<void> _markOnboardingSeen() async {
    final prefs = await SharedPreferencesService.getInstance();
    await prefs.setBool("seenOnboarding", true);
  }

  @override
  Widget build(BuildContext context) {
    return  ElevatedButton(
                onPressed: () async {
                  await _markOnboardingSeen();
                  Navigator.pushReplacement(
                    context,
                    MaterialPageRoute(builder: (_) => const AuthWrapper()),
                  );
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color(0xFF4D44B5),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(4),
                  ),
                  padding: const EdgeInsets.symmetric(vertical: 12),
                  elevation: 2,
                ),
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: const [
                    Padding(
                      padding: EdgeInsets.fromLTRB(12, 0, 8, 0),
                      child: Text(
                        "Commencer",
                        style: TextStyle(
                          color: Colors.white,
                          fontFamily: "Poppins",
                          fontSize: 14,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ),
                    SizedBox(width: 8),
                    Padding(
                      padding: EdgeInsets.fromLTRB(0, 0, 10, 0),
                      child: Icon(
                        Icons.chevron_right_rounded,
                        color: Colors.white,
                        size: 30,
                      ),
                    ),
                  ],
                ),
              );
  }
}

==== ./onboarding/presentation/widgets/onboarding_instructions.dart ====
import 'package:flutter/material.dart';

class OnboardingInstructions extends StatelessWidget {
  final List<String> instructions;
  final PageController controller;
  final Function(int) onPageChanged;

  const OnboardingInstructions({
    super.key,
    required this.instructions,
    required this.controller,
    required this.onPageChanged,
  }) ;

  @override
  Widget build(BuildContext context) {
    return PageView.builder(
      controller: controller,
      itemCount: instructions.length,
      onPageChanged: onPageChanged,
      itemBuilder: (context, index) {
        return Center(
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 30),
            child: Text(
              instructions[index],
              textAlign: TextAlign.center,
              style: const TextStyle(
                fontSize: 14,
                fontFamily: "Poppins",
                fontWeight: FontWeight.w500,
              ),
            ),
          ),
        );
      },
    );
  }
}


==== ./onboarding/presentation/widgets/onboarding_illustration.dart ====
import 'package:flutter/material.dart';
import 'package:flutter_svg/flutter_svg.dart';

class OnboardingIllustration extends StatelessWidget {
  const OnboardingIllustration({super.key});

  @override
  Widget build(BuildContext context) {
    return Expanded(
      flex: 3,
      child: SvgPicture.asset(
        height: 150,
        "assets/img/onboarding_illus.svg",
        fit: BoxFit.contain,
      ),
    );
  }
}


==== ./onboarding/presentation/widgets/onboarding_header.dart ====
import 'package:flutter/material.dart';

class OnboardingHeader extends StatelessWidget {
  const OnboardingHeader({super.key});

  @override
  Widget build(BuildContext context) {
    return Column(
      children: const [
        SizedBox(height: 100),
        Text(
          'Bienvenue dans Dirassati',
          textAlign: TextAlign.center,
          style: TextStyle(
            fontFamily: "Poppins",
            fontSize: 20,
            fontWeight: FontWeight.w600,
            letterSpacing: 0.03,
          ),
        ),
        SizedBox(height: 5),
        Text(
          'Restez proche de vos enfants',
          textAlign: TextAlign.center,
          style: TextStyle(
            fontFamily: "Poppins",
            fontSize: 14.5,
            fontWeight: FontWeight.w500,
          ),
        ),
        SizedBox(height: 20),
      ],
    );
  }
}


==== ./onboarding/presentation/widgets/onboarding_dots.dart ====
import 'package:flutter/material.dart';

class OnboardingDots extends StatelessWidget {
  final int itemCount;
  final int currentPage;

  const OnboardingDots({
    super.key,
    required this.itemCount,
    required this.currentPage,
  }) ;

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: List.generate(
        itemCount,
        (index) => AnimatedContainer(
          duration: const Duration(milliseconds: 200),
          margin: const EdgeInsets.symmetric(horizontal: 8),
          height: 10,
          width: currentPage == index ? 20 : 10,
          decoration: BoxDecoration(
            color: currentPage == index ? Colors.blue : Colors.grey,
            borderRadius: BorderRadius.circular(5),
          ),
        ),
      ),
    );
  }
}


==== ./onboarding/presentation/pages/onboarding_page.dart ====
import 'package:flutter/material.dart';
import 'package:dirassati/features/onboarding/presentation/widgets/onboarding_button.dart';
import 'package:dirassati/features/onboarding/presentation/widgets/onboarding_header.dart';
import 'package:dirassati/features/onboarding/presentation/widgets/onboarding_illustration.dart';
import '../widgets/onboarding_instructions.dart';
import '../widgets/onboarding_dots.dart';

class OnboardingPage extends StatefulWidget {
  const OnboardingPage({super.key}) ;

  @override
  State<OnboardingPage> createState() => _OnboardingPageState();
}

class _OnboardingPageState extends State<OnboardingPage> {
  final PageController _pageController = PageController();
  int currentPage = 0;

  final List<String> instructions = [
    "Avec Dirassati, suivez facilement la scolarité de votre enfant. Consultez sa présence, son comportement, ses notes et bien plus, où que vous soyez.",
    "Profitez d’une interface moderne et facile à utiliser. Tout est clair et agréable à lire, pour un suivi sans prise de tête !",
    "Plus besoin d’attendre les réunions parents-profs pour tout savoir ! Recevez en temps réel les informations essentielles sur la scolarité de votre enfant et échangez facilement avec l’établissement. Commençons !",
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: Column(
          children: [
            const OnboardingHeader(), 
            const OnboardingIllustration(), 

            Expanded(
              flex: 3,
              child: OnboardingInstructions(
                instructions: instructions,
                controller: _pageController,
                onPageChanged: (index) {
                  setState(() => currentPage = index);
                },
              ),
            ),

            const SizedBox(height: 10),
            OnboardingDots(
              itemCount: instructions.length,
              currentPage: currentPage,
            ),
            const SizedBox(height: 20),

            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 10),
              child: const OnboardingButton(),
            ),
            const SizedBox(height: 20),
          ],
        ),
      ),
    );
  }
}


==== ./auth/domain/usecases/change_password_usecase.dart ====
// lib/features/auth/domain/usecases/change_password_usecase.dart
import '../../data/repositories/auth_repo_impl.dart';

class ChangePasswordUseCase {
  final AuthRepository repository;

  ChangePasswordUseCase(this.repository);

  Future<void> execute({
    required String currentPassword,
    required String newPassword,
  }) async {
    // Business logic or additional validations can be added here.
    await repository.changePassword(
      currentPassword: currentPassword,
      newPassword: newPassword,
    );
  }
}


==== ./auth/domain/providers/auth_provider.dart ====
import 'dart:developer';

import 'package:dirassati/core/core_providers.dart';
import 'package:dirassati/core/services/colorLog.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart'; // or your secure storage wrapper
import '../../data/models/user_model.dart';
import '../../data/repositories/auth_repo_impl.dart'; // Use this version
import '../../data/datasources/auth_remote.dart';
import '../../data/datasources/auth_local.dart'; // if needed
import '../../domain/usecases/change_password_usecase.dart';


final authRemoteDataSourceProvider = Provider((ref) => AuthRemoteDataSource(ref.read(dioProvider)));
final authLocalDataSourceProvider = Provider((ref) => AuthLocalDataSource(ref.read(secureStorageProvider)));

final authRepositoryProvider = Provider((ref) => AuthRepository(
  ref.read(authRemoteDataSourceProvider),
  ref.read(authLocalDataSourceProvider),
));

final authStateProvider = StateNotifierProvider<AuthStateNotifier, UserModel?>((ref) {
  return AuthStateNotifier(ref.read(authRepositoryProvider), ref.read(secureStorageProvider));
});

class AuthStateNotifier extends StateNotifier<UserModel?> {
  final AuthRepository _authRepository;
  final FlutterSecureStorage _secureStorage;

  AuthStateNotifier(this._authRepository, this._secureStorage) : super(null);

  Future<void> login(String email, String password) async {
    final user = await _authRepository.login(email, password);
    if (user == null) {
      throw Exception("Invalid credentials");
    }
    await _secureStorage.write(key: 'auth_token', value: user.token);
    state = user;

  }

  Future<void> logout() async {
    
    await _secureStorage.delete(key: 'auth_token');
    clog('r', "Logged out");
    state = null;
  }
  
  Future<void> debugLogin() async {
    const dummyToken = "debug_dummy_token";
    // Write the dummy token to secure storage.
    await _secureStorage.write(key: 'auth_token', value: dummyToken);
    // Set a static user. Adjust these values as needed.
    state = UserModel(token: dummyToken, firstName: "Debug", lastName: "User");
    clog("r","DEBUGGG LOGIIIIIIN");
  }

}
final changePasswordUseCaseProvider = Provider<ChangePasswordUseCase>((ref) {
  final repository = ref.read(authRepositoryProvider);
  return ChangePasswordUseCase(repository);
});




==== ./auth/data/datasources/auth_local.dart ====
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

class AuthLocalDataSource {
  final FlutterSecureStorage storage;

  AuthLocalDataSource(this.storage);

  Future<void> saveToken(String token) async {
    await storage.write(key: 'auth_token', value: token);
  }

  Future<String?> getToken() async {
    return await storage.read(key: 'auth_token');
  }

  Future<void> clearToken() async {
    await storage.delete(key: 'auth_token');
  }
}


==== ./auth/data/datasources/auth_remote.dart ====
import 'package:dio/dio.dart';
import 'package:dirassati/core/shared_constants.dart';
import 'package:flutter/material.dart';
import '../models/user_model.dart';

class AuthRemoteDataSource {
  final Dio dio;

  AuthRemoteDataSource(this.dio);

  Future<UserModel> login(String email, String password) async {
    debugPrint("$email $password");
    final response = await dio.post(
      'http://$backendProviderIp/api/parent/auth/login',
      data: {
        'email': email,
        'password': password,
      },
    );
    debugPrint("Response data: ${response.data}"); // Debug print

    if (response.statusCode == 200 && response.data is Map<String, dynamic>) {
      final data = response.data as Map<String, dynamic>;
      if (data.containsKey('token') &&
          data.containsKey('firstName') &&
          data.containsKey('lastName')) {
        return UserModel.fromJson(data);
      } else {
        
        throw Exception("Missing required fields in response: $data");
        
      }
    } else {
      throw Exception("Login failed");
    }
  }
  // New method for changing password.
  Future<void> changePassword(String currentPassword, String newPassword) async {
    const endpoint = "http://$backendProviderIp/api/parent/"; // Replace with your endpoint
    final response = await dio.post(endpoint, data: {
      "current_password": currentPassword,
      "new_password": newPassword,
    });
    if (response.statusCode != 200) {
      // You might want to inspect response.data for more error details.
      throw Exception("Password change failed");
    }
  }
  
}





==== ./auth/data/models/user_model.dart ====
import 'package:freezed_annotation/freezed_annotation.dart';

part 'user_model.g.dart';

@JsonSerializable()
class UserModel {
  final String token;
  final String firstName;
  final String lastName;

  UserModel({
    required this.token,
    required this.firstName,
    required this.lastName,
  });

  factory UserModel.fromJson(Map<String, dynamic> json) =>
      _$UserModelFromJson(json);
  Map<String, dynamic> toJson() => _$UserModelToJson(this);
}


==== ./auth/data/models/user_model.g.dart ====
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'user_model.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

UserModel _$UserModelFromJson(Map<String, dynamic> json) => UserModel(
      token: json['token'] as String,
      firstName: json['firstName'] as String,
      lastName: json['lastName'] as String,
    );

Map<String, dynamic> _$UserModelToJson(UserModel instance) => <String, dynamic>{
      'token': instance.token,
      'firstName': instance.firstName,
      'lastName': instance.lastName,
    };


==== ./auth/data/repositories/auth_repo_impl.dart ====

import 'package:dirassati/features/auth/data/datasources/auth_local.dart';
import 'package:dirassati/features/auth/data/datasources/auth_remote.dart';
import 'package:dirassati/features/auth/data/models/user_model.dart';
import 'package:flutter/cupertino.dart';
class AuthRepository {
  final AuthRemoteDataSource remoteDataSource;
  final AuthLocalDataSource localDataSource;

  AuthRepository(this.remoteDataSource, this.localDataSource);

  Future<UserModel?> login(String email, String password) async {
    try {
    final user = await remoteDataSource.login(email, password);
    await localDataSource.saveToken(user.token);
    return user;
  } catch (e) {
    debugPrint("LOGIN ERROR: $e");
    
    return null;
  }
  }

  Future<void> logout() async {
    await localDataSource.clearToken();
  }

  Future<bool> isLoggedIn() async {
    return await localDataSource.getToken() != null;
  }
  Future<void> changePassword({
    required String currentPassword,
    required String newPassword,
  }) async {
    try {
      await remoteDataSource.changePassword(currentPassword, newPassword);
    } catch (e) {
      debugPrint("CHANGE PASSWORD ERROR: $e");
      throw e;
    }
  }
}


==== ./auth/presentation/widgets/login_button.dart ====
import 'package:flutter/material.dart';

class LoginButton extends StatelessWidget {
  final VoidCallback onPressed;

  const LoginButton({super.key, required this.onPressed});

  @override
  Widget build(BuildContext context) {
    return ElevatedButton(
      onPressed: onPressed,
      
      style: ElevatedButton.styleFrom(backgroundColor: const Color(0xFF4D44B5)),
      child: const Padding(
        padding: EdgeInsets.symmetric(vertical: 4.0, horizontal: 0.0),
        child: Text("Se connecter", style: TextStyle(color: Colors.white, fontSize: 16)),
      ),
    );
  }
}


==== ./auth/presentation/widgets/login_form.dart ====
// import 'package:flutter/material.dart';
// import 'email_field.dart';
// import 'password_field.dart';
// import 'login_button.dart';

// class LoginForm extends StatelessWidget {
//   const LoginForm({super.key});

//   @override
//   Widget build(BuildContext context) {
//     return Column(
//       mainAxisSize: MainAxisSize.min,
//       children: [
//         const EmailField(),
//         const SizedBox(height: 10),
//         const PasswordField(),
//         const SizedBox(height: 20),
//         const LoginButton(),
//       ],
//     );
//   }
// }


==== ./auth/presentation/widgets/forgot_password.dart ====
import 'package:flutter/material.dart';

class ForgotPassword extends StatelessWidget {
  const ForgotPassword({super.key});

  @override
  Widget build(BuildContext context) {
    return Align(
      alignment: Alignment.topRight,
      child: GestureDetector(
        onTap: () => debugPrint("forgotPassword UseCase!"),
        child: const Text(
          "Mot de passe oublié?",
          style: TextStyle(fontSize: 12, fontWeight: FontWeight.w500,letterSpacing: 0.3),
        ),
      ),
    );
  }
}


==== ./auth/presentation/widgets/email_field.dart ====
import 'package:dirassati/features/auth/presentation/widgets/label_text_style.dart';
import 'package:flutter/material.dart';

class EmailField extends StatelessWidget {
  final TextEditingController controller;
  const EmailField({super.key, required this.controller});

  @override
  Widget build(BuildContext context) {
     final inputGrey = Color(0xFF8A8A8A);
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text('Adresse Email',
            style: TextStyle(fontSize: 14,)),
        
        SizedBox(
          height: 50,
          child: TextField(
            controller: controller,
            decoration: InputDecoration(
              contentPadding: EdgeInsets.zero,
              prefixIcon:  Icon(Icons.email_outlined, color: inputGrey),
              labelText: "p.nom@esi-sba.dz",
              floatingLabelBehavior: FloatingLabelBehavior.never,
              labelStyle: labelTextStyle,
              border: const OutlineInputBorder(
                  borderRadius: BorderRadius.all(Radius.circular(7))),
              enabledBorder: const OutlineInputBorder(
                  borderRadius: BorderRadius.all(Radius.circular(7)),
                  borderSide: BorderSide(color: Colors.grey)),
              filled: true,
              fillColor: Colors.white,
            ),
          ),
        ),
      ],
    );
  }
}


==== ./auth/presentation/widgets/label_text_style.dart ====
import 'package:flutter/material.dart';

const TextStyle labelTextStyle = TextStyle(
    color: Colors.grey,
    fontWeight: FontWeight.w300,
    fontSize: 14,
  );

==== ./auth/presentation/widgets/password_field.dart ====
import 'package:flutter/material.dart';
import 'package:dirassati/features/auth/presentation/widgets/label_text_style.dart';
import 'package:flutter_svg/svg.dart';

class PasswordField extends StatefulWidget {
  final TextEditingController controller;

  const PasswordField({super.key, required this.controller});

  @override
  _PasswordFieldState createState() => _PasswordFieldState();
}

class _PasswordFieldState extends State<PasswordField> {
  bool isObscured = true;

  @override
  Widget build(BuildContext context) {
    final inputGrey = Color(0xFF8A8A8A);
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text('Mot de passe',
            style: TextStyle(
              fontSize: 14,
            )),
        SizedBox(
          height: 45,
          child: TextField(
            autofillHints: const [AutofillHints.password],
            controller: widget.controller,
            enableSuggestions: false,
            enableInteractiveSelection: true,
            obscureText: isObscured,
            obscuringCharacter: "*",
            readOnly: false,
            decoration: InputDecoration(
              contentPadding: EdgeInsets.zero,
              suffixIcon: IconButton(
                icon: Icon(
                    isObscured
                        ? Icons.visibility_off_outlined
                        : Icons.visibility_outlined,
                    color: inputGrey),
                onPressed: () => setState(() => isObscured = !isObscured),
              ),
              prefixIcon: Container(
                width: 24,
                height: 24,
                alignment: Alignment.center,
                child: SvgPicture.asset(
                  "assets/img/lockdotted.svg",
                  width: 20,
                  fit: BoxFit.contain,
                  color: inputGrey,
                ),
              ),

              labelText: "************",
              labelStyle: labelTextStyle,
              floatingLabelBehavior: FloatingLabelBehavior.never,
              border: const OutlineInputBorder(
                borderRadius: BorderRadius.all(Radius.circular(7)),
              ),
              enabledBorder: OutlineInputBorder(
                borderRadius: BorderRadius.all(Radius.circular(7)),
                borderSide: BorderSide(color: inputGrey),
              ),
              // focusedBorder: const OutlineInputBorder(
              //   borderRadius: BorderRadius.all(Radius.circular(7)),
              //   borderSide:
              //       BorderSide(color: Colors.blue), // Highlighted when focused
              // ),
              filled: true,
              fillColor: Colors.white,
            ),
          ),
        ),
      ],
    );
  }
}


==== ./auth/presentation/pages/login_page.dart ====
import 'package:dirassati/core/auth_info_provider.dart';
import 'package:dirassati/core/services/notification_service.dart';
import 'package:dirassati/features/acceuil/domain/providers/students_provider.dart';
import 'package:dirassati/features/profile/presentation/providers/profile_providers.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../../core/widgets/background_shapes.dart';
import '../widgets/email_field.dart';
import '../widgets/password_field.dart';
import '../widgets/forgot_password.dart';
import '../widgets/login_button.dart';
import '../../domain/providers/auth_provider.dart';

class LoginPage extends ConsumerStatefulWidget {
  const LoginPage({super.key});

  @override
  ConsumerState<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends ConsumerState<LoginPage> {
  // Persist controllers in the State so they are not recreated on every build.
  final TextEditingController emailController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();

  @override
  void dispose() {
    emailController.dispose();
    passwordController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final authNotifier = ref.read(authStateProvider.notifier);

    return GestureDetector(
      onTap: () => FocusScope.of(context).unfocus(),
      child: Scaffold(
        resizeToAvoidBottomInset: false,
        body: BackgroundShapes(
          child: Center(
            child: Padding(
              padding: const EdgeInsets.symmetric(horizontal: 30),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    "Authentifiez à vorte compte",
                    style: TextStyle(color: Color(0xFF393939)),
                  ),
                  SizedBox(
                    height: 35,
                  ),
                  EmailField(controller: emailController),
                  const SizedBox(height: 20),
                  PasswordField(controller: passwordController),
                  const SizedBox(height: 5),
                  const ForgotPassword(),
                  const SizedBox(height: 40),
                  LoginButton(
                    onPressed: () async {
                      try {
                        FocusScope.of(context).unfocus();
                        await authNotifier.login(
                          emailController.text,
                          passwordController.text,
                        );
                        // Invalidate providers to fetch fresh data
                        ref.invalidate(authInfoProvider);
                        ref.invalidate(parentIdProvider);
                        ref.invalidate(profileProvider);
                        ref.invalidate(studentsProvider);
                      } catch (e) {
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            behavior: SnackBarBehavior.floating,
                            margin: const EdgeInsets.only(
                                top: 20, left: 20, right: 20),
                            content:
                                const Text("Login failed: Invalid credentials"),
                            backgroundColor: Colors.red,
                          ),
                        );
                      }
                    },
                    //  () async {
                    //   try {
                    //     FocusScope.of(context).unfocus();
                    //     await authNotifier.login(
                    //       emailController.text,
                    //       passwordController.text,
                    //     );
                    //     // If login succeeds, proceed (e.g., navigate to Home).
                    //   } catch (e) {
                    //     ScaffoldMessenger.of(context).showSnackBar(
                    //       SnackBar(
                    //         behavior: SnackBarBehavior.floating,
                    //         margin: const EdgeInsets.only(
                    //             top: 20, left: 20, right: 20),
                    //         content:
                    //             const Text("Login failed: Invalid credentials"),
                    //         backgroundColor: Colors.red,
                    //       ),
                    //     );
                    //   }
                    // },
                  ),
                  // Debug Login Button for testing:
                  ElevatedButton(
                      onPressed: () async {
                        try {
                          FocusScope.of(context).unfocus();
                          await authNotifier.debugLogin();
                          // Invalidate providers to fetch fresh data
                          ref.invalidate(authInfoProvider);
                          ref.invalidate(parentIdProvider);
                          ref.invalidate(profileProvider);
                          ref.invalidate(studentsProvider);
                        } catch (e) {
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(
                              content: Text("Login failed: ${e.toString()}"),
                              backgroundColor: Colors.red,
                            ),
                          );
                        }
                      },
                      child: Text("Debug Login")),
                  ElevatedButton(
                    onPressed: () {
                      showStaticNotification();
                    },
                    child: const Text("Show Notification"),
                  ),

                  const SizedBox(height: 100),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}


==== ./auth/presentation/pages/auth_wrapper.dart ====
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../domain/providers/auth_provider.dart';
import 'home_page.dart';
import 'login_page.dart';

class AuthWrapper extends ConsumerWidget {
  const AuthWrapper({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final user = ref.watch(authStateProvider);
    if (user != null) {
      // User is authenticated, go to HomePage
      return const HomePage();
    } else {
      // No user, show the LoginPage
      return const LoginPage();
    }
  }
}


==== ./auth/presentation/pages/home_page.dart ====
import 'package:flutter/material.dart';
import 'package:dirassati/features/acceuil/presentation/pages/acceuil_page.dart';
import 'package:dirassati/features/profile/presentation/pages/profile_page.dart';
import 'package:dirassati/features/notifications/presentation/pages/notifications_page.dart';
import 'package:dirassati/core/widgets/navbar.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

class HomePage extends ConsumerStatefulWidget {
  const HomePage({super.key});

  @override
  ConsumerState<HomePage> createState() => _HomePageState();
}

class _HomePageState extends ConsumerState<HomePage> {
  int currentIndex = 0;
  final PageController _pageController = PageController();

  void _onIndexChanged(int newIndex) {
    int previousIndex = currentIndex;
    setState(() {
      currentIndex = newIndex;
    });
    
    // If the pages are not adjacent, jump directly
    if ((newIndex - previousIndex).abs() > 1) {
      _pageController.jumpToPage(newIndex);
    } else {
      _pageController.animateToPage(
        newIndex,
        duration: const Duration(milliseconds: 300),
        curve: Curves.ease,
      );
    }
  }

  @override
  void dispose() {
    _pageController.dispose();
    super.dispose();
  }
    
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: PageView(
        
        
        controller: _pageController,
        onPageChanged: (index) => setState(() => currentIndex = index),
        children: const [
          AcceuilPage(),
          NotificationsPage(),
          ProfilePage(),
        ],
      ),
      backgroundColor: const Color(0xffEDEFFF),
      bottomNavigationBar: Navbar(
        currentIndex: currentIndex,
        onIndexChanged: _onIndexChanged,
      ),
    );
  }
}


